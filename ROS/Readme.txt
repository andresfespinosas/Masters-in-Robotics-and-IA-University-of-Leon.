[Comprobación de Requisitos de una aplicación desarrollada en ROS2](https://biblus.us.es/bibing/proyectos/abreproy/94146/descargar_fichero/TFG-4146+LOZANO+ROMERO%2C+DANIEL.pdf)

**ROS** is defined as a set of libraries aimed at providing the programmer with the necessary abstractions for the hardware when developing a robotics project. Under permissive licenses, it offers developers the opportunity to use tools generated by the community, and even allows for the modification of their internal logic. To the ROS community, the contribution of different projects by developers is just as important as their involvement in external projects.

### Concepts: 

**Node**: A process that uses ROS as an application to establish communication with other processes and executes the computational load. For example, a robot has nodes for reading system sensors, nodes for processing data, and others for the specific sending of signals to actuators.


 **Message**: It is described as a data structure, composed of standardized fields encompassing standard C/C++ primitives (integer, floating point, boolean, etc.), structures for collecting data from various sensors (LaserScan, Imu, Image, etc.), sending trajectories and navigation information (JointTrajectoryPoint, Odometry, Occupancy, etc.), along with messages to ascertain the state of the process. Node communication is achieved by exchanging these messages.


**Topic**: Topics serve as the transport channel between publishers and subscribers; it is the term used to identify the content of the message. The node interested in a specific type of data must be aware of the topic through which it is sent. For instance, a node subscribes to the /BackCameraImage topic to receive an Image.msg message from the system's rear camera.

 ![image](https://github.com/andresfespinosas/Masters-in-Robotics-and-IA-University-of-Leon./assets/128443182/3ceef677-2b9a-4b38-bbaf-35f36b55d613)
